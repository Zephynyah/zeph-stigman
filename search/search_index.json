{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GSC STIG Manager Installation Guide","text":"<p>GSC STIG Manager Docs is used as a guide for Deploying STIG Manager on a RHEL 7/8 distributions system.</p> <p>For full documentation, visit STIG Manager documentation here.</p>"},{"location":"#navigation-items","title":"Navigation Items","text":"<ul> <li>Introduction - Brief introduction of the main applications in the project.</li> <li>Deployment - Procedures for deploying each requirement and applications.</li> <li>Backups - Recommended methods for redundancy.</li> <li>Usage - Printed help/usage information for each application.</li> <li>Extra - Addition configuration based on best practices.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 about.md\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 backups\n\u2502   \u251c\u2500\u2500 deployment\n\u2502   \u251c\u2500\u2500 extra\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 introduction\n\u2502   \u251c\u2500\u2500 stylesheets\n\u2502   \u2514\u2500\u2500 usage\n\u251c\u2500\u2500 extra_sass\n\u2502   \u2514\u2500\u2500 style.css.scss\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 opt\n\u2502   \u2514\u2500\u2500 deployment\n\u251c\u2500\u2500 pdf_event_hook\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 __pycache__\n\u2514\u2500\u2500 site\n    \u251c\u2500\u2500 404.html\n    \u251c\u2500\u2500 about.html\n    \u251c\u2500\u2500 assets\n    \u251c\u2500\u2500 backups\n    \u251c\u2500\u2500 deployment\n    \u251c\u2500\u2500 extra\n    \u251c\u2500\u2500 index.html\n    \u251c\u2500\u2500 introduction\n    \u251c\u2500\u2500 pdf\n    \u251c\u2500\u2500 search\n    \u251c\u2500\u2500 sitemap.xml\n    \u251c\u2500\u2500 sitemap.xml.gz\n    \u251c\u2500\u2500 stylesheets\n    \u2514\u2500\u2500 usage\n</code></pre>"},{"location":"about/","title":"Introduction","text":"<p>OpenSSL is a free and open-source cryptographic library that provides several command-line tools for handling digital certificates.  Some of these tools can be used to act as a certificate authority.</p> <p>A certificate authority (CA) is an entity that signs digital certificates.  Many websites need to let their customers know that the connection is secure, so they pay an internationally  trusted CA (eg, VeriSign, DigiCert) to sign a certificate for their domain.</p> <p>In some cases it may make more sense to act as your own CA, rather than paying a CA like DigiCert.  Common cases include securing an intranet website, or for issuing certificates to clients to allow  them to authenticate to a server (eg, Apache, Nginx, OpenVPN).</p>"},{"location":"about/#scrf-applications","title":"SCRF Applications","text":"<ul> <li>Stig-manager - Version 1.4.11</li> <li>Keycloak     - Version 24.0.4</li> </ul>"},{"location":"about/#dependencies","title":"Dependencies","text":"<ul> <li>OpenJDK 17</li> <li>Nginx</li> <li>MySQL</li> </ul>"},{"location":"about/#changelog","title":"Changelog","text":"<p>STIG Manager Documentation-0.1.1 (2024-07-05)</p> <ul> <li>Fixed admonition issues by adding etra_sass plugin</li> <li>Updated Mkdocs Bower dependencies to most recent versions</li> <li>Changed footer/copyright link to Material theme to GitHub pages</li> <li>Made MkDocs building/serving in build process optional</li> </ul> <p>STIG Manager Documentation-0.1.0 (2024-06-17)</p> <ul> <li>Initial release</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>The legal stuff.</p>"},{"location":"about/license/#included-projects","title":"Included projects","text":"<p>Themes used under license from the ReadTheDocs projects.</p> <ul> <li>ReadTheDocs theme - View license.</li> </ul> <p>Many thanks to the authors and contributors of those wonderful projects.</p> <p>MIT License</p> <p>Copyright (c) 2024 Zephynyah</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/release-notes/","title":"Release Notes","text":""},{"location":"about/release-notes/#upgrading","title":"Upgrading","text":"<p>To upgrade Zeph-OCA to the latest version, use git:</p> <pre><code>git clone https://github.com/Zephynyah/zeph-opensll-certificate-authority.git\n</code></pre> <p>You can determine your currently installed version using README.md:</p> <pre><code>\n</code></pre>"},{"location":"about/release-notes/#maintenance-team","title":"Maintenance team","text":"<p>The current and past members of the MkDocs team.</p> <ul> <li>@zephynyah</li> </ul>"},{"location":"about/release-notes/#version-010-2024-07-10","title":"Version 0.1.0 (2024-07-10)","text":""},{"location":"about/release-notes/#local-preview","title":"Local preview","text":""},{"location":"deployment/","title":"Installation Steps","text":"<p>The recommended instantiation steps are as follows: </p> <ol> <li>Assumptions</li> <li>Install Dependencies</li> <li>Install &amp; Configure MySQL</li> <li>Install &amp; Configure Keycloak</li> <li>Install &amp; Configure STIG Manager</li> <li>Install &amp; Configure NGINX</li> <li>Deploy with TLS</li> <li>Reboot</li> </ol>"},{"location":"deployment/assumptions/","title":"Assumptions","text":"<ul> <li>The deployment directory is: <code>/opt/deployment/</code></li> <li>The applications, config, and related files are staged in the deployment directory: <pre><code>/opt/deployment/keycloak/\n/opt/deployment/stigman/\n/opt/deployment/mysql/\n/opt/deployment/nginx/\n/opt/deployment/docs/\n</code></pre></li> <li>STIG Manager version is: <code>1.4.11</code></li> <li>keycloak version is: <code>24.0.4</code></li> <li>The server hostname is: <code>eh-stigman-1</code></li> <li>Realm name is: <code>stigman</code></li> <li>User is logged in as a user with root privileges on the system.</li> </ul>"},{"location":"deployment/dependencies/","title":"Dependencies","text":""},{"location":"deployment/dependencies/#steps","title":"Steps","text":"<ol> <li>Installing openjdk using dnf</li> <li>Open Ports Temporarily for STIG Manager &amp; keycloak</li> </ol>"},{"location":"deployment/dependencies/#installing-openjdk-using-dnf","title":"Installing openjdk using dnf","text":"<p>You can install Red Hat build of OpenJDK Java Runtime Environment (JRE) using the system package manager, dnf.</p> <p>Run the yum command, specifying the package you want to install: <pre><code>sudo dnf install java-17-openjdk\n</code></pre></p> <p>Check that the installation works: <pre><code>java -version\n</code></pre></p> <p>Output: <pre><code>openjdk version \"17.0.11\" 2024-04-16 LTS\nOpenJDK Runtime Environment (Red_Hat-17.0.11.0.9-3) (build 17.0.11+9-LTS)\nOpenJDK 64-Bit Server VM (Red_Hat-17.0.11.0.9-3) (build 17.0.11+9-LTS, mixed mode, sharing)\n</code></pre></p> <p>Note</p> <p>If the output from the previous command shows that you have a different major version of Red Hat build of OpenJDK checked out on your system, you can enter the following command in your CLI to switch your system to use Red Hat build of OpenJDK 17:</p> <pre><code>sudo update-alternatives --config 'java'\n</code></pre> <pre><code>There is 1 program that provides 'java'.\n\n  Selection    Command\n-----------------------------------------------\n*+ 1           java-17-openjdk.x86_64 (/usr/lib/jvm/java-17-openjdk-17.0.11.0.9-2.el8.x86_64/bin/java)\n\nEnter to keep the current selection[+], or type selection number:\n</code></pre>"},{"location":"deployment/dependencies/#open-ports-temporarily-for-stig-manager-keycloak","title":"Open Ports Temporarily for STIG Manager &amp; keycloak","text":"<p>Note</p> <p>If the firewall is not running skip this step.</p> <p>The <code>--permanent</code> flag is not used in these commands. Settings will go back to default after reboot.</p> <p>By default, the port 443, 8080 &amp; 54000 are filtered on Redhat 7 and 8 as you can only access this port from the actual localhost and not from any other public host. To open a port 80 on RHEL 7 and 8 Linux we need to add an iptables rule. For this RHEL uses <code>firewall-cmd</code>.</p> <p>Execute the below commands to to check the firewall state. <pre><code>firewall-cmd --state\n</code></pre></p> <p>Output: <pre><code>running\n[root@localhost opt]#\n</code></pre></p> <p>Execute the below commands to add port 8080 rule for keycloak:  <pre><code>firewall-cmd --zone=public --add-port=8080/tcp --permanent\n</code></pre></p> <p>Execute the below commands to add port 54000 rule for stig-manager:  <pre><code>firewall-cmd --zone=public --add-port=54000/tcp --permanent\n</code></pre></p> <p>Execute the below commands to reload the firewall service:  <pre><code>firewall-cmd --reload\n</code></pre></p> <p>Execute the below commands to check  for open ports and services. <pre><code>firewall-cmd --list-all\n</code></pre></p> <p>Info</p> <p>Open ports are listed on line starting with ports:</p> <p>The <code>--permanent</code> flag is used in this commands. Settings will persist after reboot.</p> <p>Output: <pre><code>public (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: ens160\n  sources:\n  services: ssh\n  ports: 54000/tcp 8080/tcp\n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre></p>"},{"location":"deployment/dependencies/#summary","title":"Summary","text":"<p>Summary</p> <p>In these section, you have:</p> <ul> <li>Read all the Assumptions </li> <li>Read the Installation Steps</li> <li>Installed openjdk using dnf</li> <li>Opened ports Temporary for stig-manager &amp; keycloak</li> </ul>"},{"location":"deployment/deploy/","title":"Deploy with TLS","text":""},{"location":"deployment/deploy/#steps","title":"Steps","text":"<ol> <li>Configure the Reverse Proxy</li> <li>Allow Keycloak to Communicate Through the Proxy</li> <li>Allow STIG Manager to Communicate with Keycloak</li> </ol>"},{"location":"deployment/deploy/#configure-the-reverse-proxy","title":"Configure the Reverse Proxy","text":"<p>To support HTTPS connections, STIG Manager components should be situated behind a reverse proxy.  Configure the reverse proxy (such as nginx) in accordance with publisher documentation,  local security requirements, and Keycloak documentation. In either case, you will have to set Keycloak environment variable <code>PROXY_ADDRESS_FORWARDING=true</code> and make sure appropriate headers are forwarded.</p>"},{"location":"deployment/deploy/#allow-keycloak-to-communicate-through-the-proxy","title":"Allow Keycloak to Communicate Through the Proxy.","text":"<p>Execute the below command to edit the keycloak unit file. <pre><code>sudo nano /opt/keycloak/conf/keycloak.conf\n</code></pre></p> <p>Add the below snippet to the bottom of the configuration file.  <pre><code># Custom Configuration\nproxy-address-forwarding=true\nproxy=edge\n</code></pre></p> keycloak.conf: after changes<pre><code># Basic settings for running in production. Change accordingly before deploying the server.\n\n# Database\n\n# The database vendor.\n#db=postgres\n\n# The username of the database user.\n#db-username=keycloak\n\n# The password of the database user.\n#db-password=password\n\n# The full database JDBC URL. If not provided, a default URL is set based on the selected database vendor.\n#db-url=jdbc:postgresql://localhost/keycloak\n\n# Observability\n\n# If the server should expose healthcheck endpoints.\n#health-enabled=true\n\n# If the server should expose metrics endpoints.\n#metrics-enabled=true\n\n# HTTP\n\n# The file path to a server certificate or certificate chain in PEM format.\n#https-certificate-file=${kc.home.dir}conf/server.crt.pem\n\n# The file path to a private key in PEM format.\n#https-certificate-key-file=${kc.home.dir}conf/server.key.pem\n\n# The proxy address forwarding mode if the server is behind a reverse proxy.\n#proxy=reencrypt\n\n# Do not attach route to cookies and rely on the session affinity capabilities from reverse proxy\n#spi-sticky-session-encoder-infinispan-should-attach-route=false\n\n# Hostname for the Keycloak server.\n#hostname=myhostname\n\n# Custom Configuration\nproxy-address-forwarding=true\nproxy=edge\n</code></pre> <p>Save and exit.</p> <p>Execute the below command to restart keycloak: <pre><code>sudo systemctl restart keycloak.service\n</code></pre></p> <p>Info</p> <p>All should now be ready to access Keycloak from a remote host. </p> <p>Access the Keycloak sign-in page.</p> <ul> <li>Open browser and paste the URL or navigate to https://eh-stigman-1 URL.</li> <li>Login with the Admin user name and password created earlier.</li> <li>All setting and Reals should still be accessible and unchanged.</li> </ul>"},{"location":"deployment/deploy/#allow-stig-manager-to-communicate-with-keycloak","title":"Allow STIG Manager to Communicate with Keycloak.","text":"<p>Open browser and paste the url or navigate to https://eh-stigman-1/stigman URL.</p> <p>Info</p> <p>STIG Manger will not communicate with keycloak because nginx. </p> <p>We need to:</p> <ul> <li>Change STIG Manager's client OIDC provider to now use <code>https://</code>.</li> <li>Remove the port <code>8080</code></li> </ul> <p>Execute the below commands to edit STIG Manager's environment file. <pre><code>sudo nano /opt/stig-manager/stig-manager.sh\n</code></pre></p> stig-manager.sh: after changes<pre><code>...\n#==============================================================================\n# STIGMAN_CLIENT_OIDC_PROVIDER\n#\n#  | Default: Value of \"STIGMAN_OIDC_PROVIDER\" | Client override of the base URL\n#  of the OIDC provider issuing signed JWTs for the API.  The string \"/.well-\n#  known/openid-configuration\" will be appended by the client when fetching\n#  metadata.\n#\n#  Affects: Client\n#==============================================================================\nexport STIGMAN_CLIENT_OIDC_PROVIDER=https://eh-stigman-1/realms/stigman\n...\n</code></pre> <p>Save and exit.</p> <p>Execute the below commands restart STIG Manager: <pre><code>sudo systemctl restart stigman.service\n</code></pre></p> <p>Open browser and paste the url or navigate to https://eh-stigman-1/stigman URL.</p>"},{"location":"deployment/deploy/#summary","title":"Summary","text":"<p>Summary</p> <p>In these procedures, on a RHEL 7/8 distributions, you have:</p> <ul> <li>Configured the Reverse Proxy</li> <li>Allowed Keycloak to Communicate Through the Proxy</li> <li>Allowed STIG Manager to Communicate with Keycloak</li> <li>Fixed STIG Manager ServiceWorker.js Error</li> </ul>"},{"location":"deployment/keycloak/","title":"Installing &amp; Configuring Keycloak","text":""},{"location":"deployment/keycloak/#procedures","title":"Procedures","text":"<ol> <li>Extract Keycloak Server</li> <li>Create a Systemd Unit File for Keycloak</li> <li>Create a Symbolic Link (symlink) Folder</li> <li>Enable Keycloak Service on System Startup</li> <li>Create the First Administrator From Command Line</li> <li>Login and Using the Admin Console</li> <li>Import STIG Manager Realm Template</li> <li>Start keycloak As a Service</li> </ol>"},{"location":"deployment/keycloak/#extract-keycloak-server","title":"Extract Keycloak Server","text":"<p>We are going to install Keycloak to <code>/opt/</code> directory, so we will copy/or extract the  Keycloak package to that location. </p> <p>Execute the below commands to move to the <code>/opt</code> directory: <pre><code>cd /opt/\n</code></pre></p> <p>Execute the below commands to unzip the keycloak: <pre><code>sudo unzip /opt/deployment/keycloak/keycloak-24.0.4.zip\n</code></pre></p>"},{"location":"deployment/keycloak/#creating-a-systemd-unit-file-for-keycloak","title":"Creating a systemd Unit File for Keycloak","text":"<p>Copy systemd unit file (keycloak.service) under <code>/opt/deployment/keycloak/scripts/systemd/</code> to <code>/etc/systemd/system/</code> directory.</p> <p>Info</p> <p>More information bout system D files can be found here. systemd Unit Files</p> <p>Execute the below commands to move to <code>../systemd/</code> deployment directory: <pre><code>cd /opt/deployment/keycloak/scripts/systemd/\n</code></pre></p> <p>Execute the below commands to copy the file: <pre><code>sudo cp ./keycloak.service /etc/systemd/system/keycloak.service\n</code></pre></p> <p>Below is the content of the <code>keycloak.service</code> file</p> <pre><code>[Unit]\nDescription=The Keycloak Application Server\nAfter=syslog.target network.target\nBefore=httpd.service\n\n[Service]\nType=simple\nWorkingDirectory=/opt/keycloak\nEnvironment=\"KC_HTTP_ENABLED=true\"\nEnvironment=\"KC_HOSTNAME_STRICT=false\"\nAmbientCapabilities=CAP_SYS_ADMIN\nLimitNOFILE=102642\nPIDFile=/var/run/keycloak/keycloak.pid\nExecStart=/bin/bash -c \"./bin/kc.sh start\"\n\n# Logging\nStandardOutput=append:/var/log/keycloak.log\nStandardError=append:/var/log/keycloak.log\n\n# Restart\nRestart=always\nRestartSec=60\nTimeoutStartSec=60\nTimeoutStopSec=60\n\nSuccessExitStatus=0 143\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"deployment/keycloak/#create-a-symbolic-link-symlink-folder","title":"Create a symbolic link (symlink) folder.","text":"<p>A symlink is used hear to make the keycloak folder appear in the same directory on the filesystem but with different names.</p> <p>Info</p> <p>This is used to simply version changes without changing the main configuration files. </p> <p>For example: the systemd file \"<code>keycloak.service</code>\", will always point to Keycloak rather that a specific version.</p> <p>Execute the below commands to create the symlink for keycloak:</p> <pre><code>sudo ln -s /opt/keycloak-24.0.4 /opt/keycloak\n</code></pre> <p>Note</p> <p>Below is an example of what this directory would look like for an upgrade. </p> <p>To remove the <code>sudo unlink /opt/keycloak</code></p> <p>To link <code>keycloak-24.0.5</code> run <code>sudo ln -s /opt/keycloak-24.0.5 /opt/keycloak</code></p> <p>Example:  <pre><code>...\nlrwxrwxrwx. 1 root root   20 Jul  5 20:10 keycloak -&gt; /opt/keycloak-24.0.5\ndrwxr-xr-x. 8 root root  157 Jul  5 20:09 keycloak-24.0.4\ndrwxr-xr-x. 8 root root  138 Jul  5 20:29 keycloak-24.0.5\n...\n</code></pre></p>"},{"location":"deployment/keycloak/#enable-keycloak-service-on-system-startup","title":"Enable keycloak service on system startup","text":"<p>Reload systemd manager configuration  <pre><code>sudo systemctl daemon-reload\n</code></pre></p> <p>Execute the below commands to enable keycloak service on system startup: <pre><code>sudo systemctl enable keycloak\n</code></pre> Output: <pre><code>Created symlink /etc/systemd/system/multi-user.target.wants/keycloak.service \u2192 /etc/systemd/system/keycloak.service.\n[root@localhost opt]#\n</code></pre></p>"},{"location":"deployment/keycloak/#creating-the-first-administrator-from-command-line","title":"Creating the first administrator from command line.","text":"<p>Info</p> <p>After installing Keycloak, you need an administrator account that can act as a super admin with full  permissions to manage Keycloak. With this account, you can log in to the Keycloak Admin Console where  you create or import realms and users and register applications that are secured by Keycloak.</p> <p>If you cannot access the server from a localhost address or just want to start Keycloak from the command line, use the KEYCLOAK_ADMIN and KEYCLOAK_ADMIN_PASSWORD environment variables to create an initial admin account.</p> <p><pre><code>export KEYCLOAK_ADMIN=admin\nexport KEYCLOAK_ADMIN_PASSWORD=Password123!\n\n/opt/keycloak/bin/kc.sh start-dev\n</code></pre> Output: <pre><code>UPDATE SUMMARY\nRun:                        124\nPreviously run:               0\nFiltered out:                 0\n-------------------------------\nTotal change sets:          124\n\n2024-07-08 20:39:30,834 INFO  [org.keycloak.services] (main) KC-SERVICES0050: Initializing master realm\n2024-07-08 20:39:37,301 INFO  [org.keycloak.services] (main) KC-SERVICES0009: Added user 'admin' to realm 'master'\n2024-07-08 20:39:37,526 INFO  [io.quarkus] (main) Keycloak 24.0.4 on JVM (powered by Quarkus 3.8.4) started in 26.614s. Listening on: http://0.0.0.0:8080\n2024-07-08 20:39:37,527 INFO  [io.quarkus] (main) Profile dev activated.\n2024-07-08 20:39:37,527 INFO  [io.quarkus] (main) Installed features: [agroal, cdi, hibernate-orm, jdbc-h2, keycloak, logging-gelf, narayana-jta, reactive-routes, resteasy-reactive, resteasy-reactive-jackson, smallrye-context-propagation, vertx]\n2024-07-08 20:39:37,532 WARN  [org.keycloak.quarkus.runtime.KeycloakMain] (main) Running the server in development mode. DO NOT use this configuration in production.\n</code></pre></p> <p>Info</p> <p>From a localhost, open the web browser, go to the http://localhost:8080 URL.</p> <p>From a different computer, open the web browser, go to the http://eh-stigman-1:8080 URL.</p>"},{"location":"deployment/keycloak/#start-keycloak-as-a-service","title":"Start Keycloak as a service.","text":"<p>Execute the below commands to exit keycloak. <pre><code>ctl + c\n</code></pre></p> <p>Execute the below commands to build keycloak: <pre><code>sudo /opt/keycloak/bin/kc.sh build\n</code></pre></p> <p>Execute the below commands to restart service: <pre><code>sudo systemctl restart keycloak.service\n</code></pre></p> <p>Execute the below commands to check the status of the service: <pre><code>sudo systemctl status keycloak.service\n</code></pre></p> <p>Execute the below commands to look at the logs <pre><code>tail -f /var/log/keycloak.log\n</code></pre></p>"},{"location":"deployment/keycloak/#login-and-using-the-admin-console","title":"Login and using the Admin Console","text":"<p>You configure realms and perform most administrative tasks in the Keycloak Admin Console. Before continuing this step make sure:</p> <ul> <li>The Keycloak Server is started and running.</li> <li>You have an administrator account you create in Step 7.</li> </ul> <p>Go to the URL for the Admin Console.</p> <ul> <li>From localhost, use this URL: http://localhost/admin</li> <li>From remote host, use this URL: http://eh-stigman-1:8080/admin</li> </ul> <p>Info</p> <p>This action should display the Admin Console.</p> <p>On the Keycloak Welcome Page, enter the Admin username and password you created in the initial previous guide. </p>"},{"location":"deployment/keycloak/#importing-the-stig-manager-realm-template","title":"Importing the STIG Manager Realm Template","text":"<p>A realm in Keycloak is equivalent to a tenant. Each realm allows an administrator to create isolated groups of applications and users. Initially, Keycloak includes a single realm, called master. Use this realm only for managing Keycloak and not for managing any applications.</p> <p>Use these steps to create the first realm form Admin console.</p> <ol> <li>Open the Keycloak Admin Console http://eh-stigman-1:8080/admin.</li> </ol> <ol> <li> <p>Click Keycloak next to master realm, then click Create Realm.</p> </li> <li> <p>You can drag and drop the <code>import_realm.json</code> file or press <code>browse</code> to to navigate to its location.</p> </li> <li> <p>Click <code>Create</code>.</p> </li> </ol> <p>Info</p> <p>You should receive a success message notification.</p> <p>The new realm should now be available for further configuration.</p>"},{"location":"deployment/keycloak/#summary","title":"Summary","text":"<p>Summary</p> <p>In these procedures, on a RHEL 7/8 distributions, you have:</p> <ul> <li>Installed the JRE requirement for keycloak.</li> <li>Created the Keycloak Server opt directory.</li> <li>Created a user and group for Keycloak.</li> <li>Change permission and ownership of keycloak directory.</li> <li>Created a systemd Unit file for keycloak</li> <li>Created a symbolic link (symlink) folder for keycloak.</li> <li>Enabled keycloak service on system startup.</li> <li>Created the first administrator from command line.</li> <li>Started keycloak as a Service.</li> <li>Log into the Admin Console and import a realm template.</li> </ul>"},{"location":"deployment/mysql/","title":"Installing &amp; Configuring MySQL","text":"<p>To install MySQL, use the following procedure. </p>"},{"location":"deployment/mysql/#steps","title":"Steps","text":"<ol> <li>Install the MySQL Server</li> <li>Create MySQL and STIG Manager user</li> <li>Configure MySQL for STIG Manager</li> <li>Change the default MySQL data directory</li> <li>Set SELinux security context for the new data directory</li> <li>(Optional) Create a Database to Confirm Data Directory</li> </ol>"},{"location":"deployment/mysql/#install-the-mysql-server","title":"Install the MySQL Server","text":"<p>Install MySQL server packages:  <pre><code>sudo dnf install mysql-server\n</code></pre></p> <p>Start the mysqld service: <pre><code>systemctl start mysqld.service\n</code></pre></p> <p>Enable the mysqld service to start at boot: <pre><code>sudo systemctl enable mysqld.service\n</code></pre></p> <p>Warning</p> <p>Recommended: To improve security when installing MySQL, run the following command: </p> <p><pre><code>mysql_secure_installation\n</code></pre> The command launches a fully interactive script, which prompts for each step in the process.  The script enables you to improve security in the following ways:</p> <ul> <li>Setting a password for root accounts</li> <li>Removing anonymous users</li> <li>Disallowing remote root logins (outside the local host) </li> </ul>"},{"location":"deployment/mysql/#create-mysql-and-stig-manager-user","title":"Create MySQL and STIG Manager user","text":"<p>Reference: 3.2.1. Configure MySQL</p> <p>The STIG Manager API requires a dedicated MySQL database (equivalent to a schema in other RDBMS products). The API connects to MySQL with an account that must have a full grant to the dedicated database but does not require server administration privileges. On first bootstrap, all database tables, views, and static data will be created. Example commands to prepare MySQL for initial API execution:</p> <p>Note</p> <p>All database commands has end with a semi-colon <code>;</code> except logins in and exiting.</p> <p>Login to the database:  <pre><code>mysql -u root -p\n</code></pre> Create database:  <pre><code>CREATE DATABASE stigman;\n</code></pre></p> <p>Create API user account. Replace <code>new_password</code> with ypur password <pre><code>CREATE USER 'stigman'@'%' IDENTIFIED BY 'new_password';\n</code></pre></p> <p>Grant API user account all privileges on created database <pre><code>GRANT ALL ON stigman.* TO 'stigman';\n</code></pre></p> <p>Run <code>SHOW DATABASES</code> to lists the databases on the MySQL server host. <pre><code>SHOW DATABASES\n</code></pre></p> <pre><code>+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| stigman            |\n| sys                |\n| tecmint            |\n+--------------------+\n6 rows in set (0.07 sec)\n</code></pre> <p>Execute the below commands to exit mysql. <pre><code>exit\n</code></pre></p> <p>Info</p> <p>Rather than using SET PASSWORD to assign passwords, ALTER USER is the preferred statement for account alterations,  including assigning passwords. For example:</p> <pre><code>ALTER USER 'stigman'@'%' IDENTIFIED BY 'Password123!';\n</code></pre>"},{"location":"deployment/mysql/#configure-mysql-for-stig-manager","title":"Configure MySQL for STIG Manager","text":"<p>Reference: 3.2.1. Configure MySQL</p> <p>Warning</p> <p>Suggested DB configuration options: </p> <ul> <li> <p><code>sort_buffer_size</code> - set to at least 2M (2097152),  and perhaps up to 64M (Increasing the sort_buffer_size from the default of 256k may only be  required if you have very large detail/comment text fields). </p> </li> <li> <p><code>innodb_buffer_pool_size</code> - set  to at least 256M (268435456), and perhaps up to 2GB (2147483648)</p> </li> </ul> <p>Login into mysql as the root user, enter password, press <code>enter</code>. <pre><code>mysql -u root -p\n</code></pre></p> <p>Execute the below commands to and check the default values <pre><code>SHOW VARIABLES LIKE 'sort_buffer_size';\n</code></pre> sort_buffer_size<pre><code>+------------------+--------+\n| Variable_name    | Value  |\n+------------------+--------+\n| sort_buffer_size | 262144 |\n+------------------+--------+\n1 row in set (0.74 sec)\n</code></pre> <pre><code>SHOW VARIABLES LIKE 'innodb_buffer_pool_size';\n</code></pre> innodb_buffer_pool_size<pre><code>+-------------------------+-----------+\n| Variable_name           | Value     |\n+-------------------------+-----------+\n| innodb_buffer_pool_size | 134217728 |\n+-------------------------+-----------+\n1 row in set (0.01 sec)\n</code></pre></p> <p>Edit the config file and add the details in <code>/etc/my.cnf</code>. <pre><code>sudo nano /etc/my.cnf\n</code></pre> Within an option file, those variables are set like this:</p> <pre><code>[mysqld]\nsort_buffer_size=64M\ninnodb_buffer_pool_size=2G\n</code></pre> Example of /etc/my.cnf<pre><code>#\n# This group is read both both by the client and the server\n# use it for options that affect everything\n#\n[client-server]\n\n\n[mysqld]\nsort_buffer_size=64M\ninnodb_buffer_pool_size=2G\n\n#\n# include all files from the config directory\n#\n!includedir /etc/my.cnf.d\n</code></pre> <p>Save and close the file when done, then restart MySQL <pre><code>sudo systemctl restart mysqld.service\n</code></pre> Perform the instructions in <code>Step 2</code> to validate the values have changed. sort_buffer_size<pre><code>+------------------+----------+\n| Variable_name    | Value    |\n+------------------+----------+\n| sort_buffer_size | 67108864 |\n+------------------+----------+\n1 row in set (0.01 sec)\n</code></pre> innodb_buffer_pool_size<pre><code>+-------------------------+------------+\n| Variable_name           | Value      |\n+-------------------------+------------+\n| innodb_buffer_pool_size | 2147483648 |\n+-------------------------+------------+\n1 row in set (0.00 sec)\n</code></pre></p>"},{"location":"deployment/mysql/#changing-the-default-mysql-data-directory","title":"Changing the default MySQL Data Directory","text":"<p>Danger</p> <p>Changing the Default MySQL Data Directory in Linux has risk. Do a complete backup before performing this step.</p> <p>Based on the expected use of the STIG Manager database server, we may want to change the  default data directory (<code>/var/lib/mysql</code>) to a different location. This directory is expected to  grow due to high usage. </p> <p>Warning</p> <p>GSC recommends changing the default for the following reasons:</p> <p>The filesystem where <code>/var</code> is stored may collapse at one point causing the entire system to fail. </p> <p>Changing the default directory to a dedicated local/network share that we want to use to store our actual data.</p> <p>For these reason we will change the default MySQL data directory to a different path.</p> <p>Note</p> <p>We are going to assume that our new data directory is <code>/data/mysql</code>. It is important to note that this directory should be owned by <code>mysql:mysql</code>.</p> <p>Execute the below commands to create the new directory if it does not exist: <pre><code>sudo mkdir -p /data/mysql \nsudo chown -R mysql:mysql /data/mysql\n</code></pre></p> <p>Note</p> <p>To begin, it is worthy and well to identify the current data directory using the following command.  Do not just assume it is still <code>/var/lib/mysql</code> since it could have been changed in the past.</p> <p>Execute the below commands to identify the current MySQL Data directory: <pre><code>sudo mysql -u root -p -e \"SELECT @@datadir;\"\n</code></pre> After you enter the MySQL password, the output should be similar to. Current MySQL Data Directory<pre><code>+-----------------+\n| @@datadir       |\n+-----------------+\n| /var/lib/mysql/ |\n+-----------------+\n</code></pre></p> <p>To avoid data corruption, stop the service if it is currently running before proceeding. Use the systemd well-known commands to do so.</p> <p>Execute the below commands to copy MySQL Data Directory to a new location: <pre><code>sudo systemctl stop mysqld.service\nsudo systemctl is-active mysqld\n</code></pre></p> <p>Info</p> <p>If the service has been brought down, the output of the last command should be as follows:</p> Identify MySQL Data Directory<pre><code>[root@localhost ~]# systemctl is-active mysqld.service\ninactive\n[root@localhost ~]#\n</code></pre> <p>Then copy recursively the contents of <code>/var/lib/mysql</code> to <code>/data/mysql</code> preserving original permissions and timestamps:</p> <p><pre><code>sudo cp -R -p /var/lib/mysql/* /data/mysql\n</code></pre> or <pre><code>sudo rsync -av /var/lib/mysql/* /data/mysql \n</code></pre> Edit the configuration file (my.cnf) to indicate the new data directory (<code>/data/mysql in this case</code>).</p> <p>Execute the below commands to configure the New MySQL data directory: <pre><code>sudo nano /etc/my.cnf\n</code></pre></p> <p>Locate or add the <code>[client]</code> sections and make the following changes after the <code>[client-server]</code> block:</p> <p><pre><code>[client]\nport=3306\nsocket=/data/mysql/mysql.sock\n</code></pre> Save the changes and then proceed with the next step.</p> Configure New MySQL Data Directory<pre><code>#\n# This group is read both both by the client and the server\n# use it for options that affect everything\n#\n[client-server]\n\n\n[mysqld]\nsort_buffer_size=64M\ninnodb_buffer_pool_size=2G\n\n\n[client]\nport=3306\nsocket=/data/mysql/mysql.sock\n\n\n#\n# include all files from the config directory\n#\n!includedir /etc/my.cnf.d\n</code></pre> <p>Now lets change the server settings in <code>/etc/my.cnf.d/mysql-server.cnf</code> <pre><code>sudo nano /etc/my.cnf.d/mysql-server.cnf\n</code></pre></p> <p>Make the following changes then save and exit the editor:</p> <ul> <li><code>datadir=/var/lib/mysql</code> -&gt; <code>/data/mysql</code></li> <li><code>socket=/var/lib/mysql/mysql.sock</code> -&gt; <code>/data/mysql/mysql.sock</code></li> </ul> <pre><code>#\n# This group are read by MySQL server.\n# Use it for options that only the server (but not clients) should see\n#\n# For advice on how to change settings please see\n# http://dev.mysql.com/doc/refman/en/server-configuration-defaults.html\n\n# Settings user and group are ignored when systemd is used.\n# If you need to run mysqld under a different user or group,\n# customize your systemd unit file for mysqld according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\n[mysqld]\ndatadir=/data/mysql\nsocket=/data/mysql/mysql.sock\nlog-error=/var/log/mysql/mysqld.log\npid-file=/run/mysqld/mysqld.pid\n</code></pre>"},{"location":"deployment/mysql/#set-selinux-security-context-to-data-directory","title":"Set SELinux Security Context to Data Directory","text":"<p>Note</p> <p>This step is only applicable to RHEL/CentOS and its derivatives.</p> <p>Add the SELinux security context to <code>/data/mysql</code> before restarting MySQL by running the following commands:</p> <p><pre><code>sudo semanage fcontext -a -t mysqld_db_t \"/data/mysql(/.*)?\"\nsudo restorecon -R /data/mysql\n</code></pre> Next restart the MySQL service then check the status.</p> MySQL commands<pre><code>sudo systemctl start mysqld.service\nsudo systemctl is-active mysqld\n</code></pre> <p>Now, use the same command as in <code>Step 1</code> to verify the location of the new data directory: Verify MySQL New Data Directory<pre><code>sudo mysql -u root -p -e \"SELECT @@datadir;\"\n</code></pre> New MySQL Data Directory<pre><code>+-----------------+\n| @@datadir       |\n+-----------------+\n| /data/mysql/    |\n+-----------------+\n</code></pre></p>"},{"location":"deployment/mysql/#optional-create-a-database-to-confirm-data-directory","title":"(Optional) Create a Database to Confirm Data Directory","text":"<p>Run the following command to login to MySQL and create a new database in the new directory <code>/data/mysql</code>:</p> <p>Check MySQL New Data Directory<pre><code>mysql -u root -p -e \"CREATE DATABASE gsctest;\"\n</code></pre> If you did not receive an error, Execute the below commands to remove the new Database you just created:</p> <p>Drop MySQL gsctest Data Base<pre><code>mysql -u root -p -e \"DROP DATABASE gsctest;\"\n</code></pre> Both commands are expected to return an \"ok\" message.</p>"},{"location":"deployment/mysql/#summary","title":"Summary","text":"<p>Summary</p> <p>In these procedures, on a RHEL 7/8 distributions, you have:</p> <ul> <li>Install the MySQL Server </li> <li>Created the STIG Manager MySQL Database.</li> <li>Set the suggested DB configuration options in a MySQ.</li> <li>Change the default MySQL data directory.</li> <li>Set SELinux security context for the new data directory</li> </ul>"},{"location":"deployment/nginx/","title":"Installing &amp; Configuring NGINX","text":"<p>The aim of this section is to get you started with basic Nginx web-server installation using the dnf  install nginx command and configuration on RHEL 8 / CentOS 8. Nginx web server is an Apache alternative  with a capability to be also used as reverse proxy, load balancer, mail proxy and HTTP cache.</p>"},{"location":"deployment/nginx/#steps","title":"Steps","text":"<ol> <li>Install Nginx</li> <li>Enable HTTPS SSL support on Nginx</li> <li>Generate SSL Keys and Certificates</li> <li>Open HTTPS and HTTP ports (443 and 80)</li> </ol>"},{"location":"deployment/nginx/#install-nginx","title":"Install Nginx","text":"<p>Install package nginx using the dnf command. <pre><code>sudo dnf install nginx\n</code></pre></p> <p>Start the Nginx service: <pre><code>sudo systemctl start nginx\n</code></pre></p> <p>To ensure that Nginx starts after the reboot enable systemd service the nginx: <pre><code>sudo systemctl enable nginx\n</code></pre></p> <p>Execute the below commands to check the status of the service: <pre><code>sudo systemctl status nginx.service\n</code></pre></p> <p>Output: <pre><code>Created symlink /etc/systemd/system/multi-user.target.wants/nginx.service \u2192 /usr/lib/systemd/system/nginx.service.\n</code></pre></p> <p>Open HTTP firewall port 80: <pre><code>sudo firewall-cmd --zone=public --permanent --add-service=http\nsudo firewall-cmd --reload\n</code></pre></p> <p>Backup the nginx configuration file <code>/etc/nginx/nginx.conf</code> <pre><code>cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.distro\n</code></pre></p> <p>Info</p> <p>All should now be ready to access Nginx from a remote host. </p> <p>Access the Nginx welcome page.</p> <ul> <li>Open browser and navigate to <code>http://eh-stigman-1/</code> URL.</li> </ul>"},{"location":"deployment/nginx/#enable-https-ssl-support-on-nginx","title":"Enable HTTPS SSL support on Nginx","text":"<p>Copy the nginx sever configuration file to <code>/etc/nginx/conf.d</code></p> <p>Execute the below commands to copy the config file: <pre><code>sudo cp /opt/deployment/nginx/etc/nginx/conf.d/stigman.nginx.conf /etc/nginx/conf.d\n</code></pre></p> <p>View this file as plain text</p> <pre><code># generated 2024-06-05, Mozilla Guideline v5.7\n\nserver {\n    listen                  443 ssl http2;\n    listen                  [::]:443 ssl http2;\n    server_name             eh-stigman-1;\n    ssl_certificate         /etc/pki/nginx/eh-stigman-1.crt;        \n    ssl_certificate_key     /etc/pki/nginx/private/eh-stigman-1.key;     \n\n    ssl_session_timeout     1d;\n    ssl_session_cache       shared:MozSSL:10m;  # about 40000 sessions\n    ssl_session_tickets     off;\n\n    # curl https://ssl-config.mozilla.org/ffdhe2048.txt &gt; /path/to/dhparam\n    # ssl_dhparam             /etc/pki/nginx/dhparam;\n\n    # intermediate configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS (ngx_http_headers_module is required) (63072000 seconds)\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n\n    # verify chain of trust of OCSP response using Root CA and Intermediate certs\n    # ssl_trusted_certificate /etc/pki/nginx/ca-chain.cert.pem;\n\n\n    location / {\n        proxy_pass              http://eh-stigman-1:54000/;\n    }\n\n    location /auth/ {\n        proxy_pass              http://eh-stigman-1:8080/auth/;\n        proxy_set_header        Host               $host;\n        proxy_set_header        X-Real-IP          $remote_addr;\n        proxy_set_header        X-Forwarded-For    $proxy_add_x_forwarded_for;\n        proxy_set_header        X-Forwarded-Host   $host;\n        proxy_set_header        X-Forwarded-Server $host;\n        proxy_set_header        X-Forwarded-Port   $server_port;\n        proxy_set_header        X-Forwarded-Proto  X$scheme;\n        proxy_set_header        ssl-client-cert    $ssl_client_escaped_cert;\n        proxy_buffer_size       128k;\n        proxy_buffers           4 256k;\n        proxy_busy_buffers_size 256k;\n    }\n}\n</code></pre>"},{"location":"deployment/nginx/#generate-ssl-keys-and-certificates","title":"Generate SSL Keys and Certificates","text":"<p>Create a directory to hold the SSL certificate and the private key for the Nginx server.</p> <p>Info</p> <p>The cert will be created and placed in <code>/etc/pki/nginx/server.crt</code></p> <p>the key will be created and placed in <code>/etc/pki/nginx/private/server.key</code> </p> <p>Execute the below commands to create the directories: <pre><code>sudo mkdir -p /etc/pki/nginx/private/ \n</code></pre></p> <pre><code>sudo mkdir -p /opt/pki\n</code></pre> <pre><code>cd /opt/pki\n</code></pre> <p>Execute the below command to generate CA's private key and self-signed certificate <pre><code>  openssl req -x509 -newkey rsa:4096 \\\n    -days 3650 \\\n    -nodes \\\n    -keyout ca-key.pem \\\n    -out ca-cert.pem \\\n    -subj \"/C=US/ST=Connecticut/L=East Hartford/O=Alice Ltd/OU=Finance/CN=Alice Ltd Certificate Authority/emailAddress=alice.ca@support.com\"\n</code></pre></p> <p>Execute the below command to  create the CA's self-signed certificate: <pre><code>openssl x509 -in ca-cert.pem -noout -text\n</code></pre></p> <p>Execute the below command to generate web server's private key and certificate signing request (CSR) <pre><code>openssl req -newkey rsa:4096 \\\n    -keyout server-key.pem \\\n    -out server-req.pem \\\n    -subj \"/C=US/ST=Connecticut/L=East Hartford/O=Alice Ltd/OU=Finance/CN=*.staging.local/emailAddress=alice.finance@support.com\"\n</code></pre></p> <p>Execute the below command to create the config file:</p> <p>Note</p> <p>Edit the DNS, IP, and wildcard information below before running the command.</p> <pre><code>echo \"subjectAltName=DNS:*.monofinance.net,DNS:*.monofinance.com,DNS:*.monofinance.org,IP:0.0.0.0\" \\\n &gt; server-ext.cnf\n</code></pre> <p>Execute the below command to use CA's private key to sign web server's CSR and get back the signed certificate <pre><code>openssl x509 -req -in server-req.pem \\\n    -CA ca-cert.pem \\\n    -CAkey ca-key.pem \\\n    -CAcreateserial \\\n    -out server-cert.pem -days 3650 \\\n    -extfile server-ext.cnf\n</code></pre></p> <p>Execute the below command below to show the Server's signed certificate: <pre><code>openssl x509 -in server-cert.pem -noout -text\n</code></pre></p> <p>Execute the below command below to verify Server and CA certificates: <pre><code>openssl verify -CAfile ca-cert.pem server-cert.pem\n</code></pre></p> <p>Execute the below commands below to copy the file to the appropriate directories: <pre><code>cp server-cert.pem /etc/pki/nginx/server.crt\ncp server-cert.key  /etc/pki/nginx/private/server.key\n</code></pre></p> <p>Reload the Nginx configuration to pick load the new certs: <pre><code>sudo systemctl restart nginx.service\n</code></pre></p>"},{"location":"deployment/nginx/#open-https-and-http-ports-443-and-80","title":"Open HTTPS and HTTP ports (443 and 80)","text":"<p>Execute the below command below to open the port: <pre><code>firewall-cmd --zone=public --permanent --add-service=https\nfirewall-cmd --zone=public --permanent --add-service=http\nfirewall-cmd --reload\n</code></pre></p> <p>Access the Nginx welcome page. All should now be ready to access Nginx from a remote host.  Open the browser and paste the URL or navigate to {{ no such element: dict object['ssl'] }}.</p>"},{"location":"deployment/nginx/#summary","title":"Summary","text":"<p>Summary</p> <p>In these procedures, on a RHEL 7/8 distributions, you have:</p> <ul> <li>Installed Nginx</li> <li>Enabled HTTPS SSL support on Nginx</li> <li>Generated SSL Keys and Certificates</li> <li>Opened HTTPS and HTTP ports (443 and 80)</li> </ul>"},{"location":"deployment/reboot/","title":"Reboot and validation","text":"<p>Perform the following procedure below to reboot the Host Server and validate previous configurations</p>"},{"location":"deployment/reboot/#procedures","title":"Procedures","text":"<ul> <li>Perform and Host Server reboot</li> <li>Validate Keycloak services is still running </li> <li>Validate STIG Manager services is still running </li> <li>Validate Nginx services is still running </li> <li>Validate Temporarily enabled port are not open</li> <li>Validate Permanently enabled Services are still open</li> </ul>"},{"location":"deployment/reboot/#perform-and-host-server-reboot","title":"Perform and Host Server reboot","text":"<p>Execute the below commands to reboot the computer. <pre><code>reboot\n</code></pre></p> <p>Wait for the server to reboot the log back into the shell.</p>"},{"location":"deployment/reboot/#validate-keycloak-services-is-still-running","title":"Validate Keycloak services is still running","text":"<p>Execute the below commands to check the status of the service: <pre><code>sudo systemctl status keycloak.service\n</code></pre></p>"},{"location":"deployment/reboot/#validate-stig-manager-services-is-still-running","title":"Validate STIG Manager services is still running","text":"<p>Execute the below commands to check the status of the service: <pre><code>sudo systemctl status stigman.service\n</code></pre></p>"},{"location":"deployment/reboot/#validate-nginx-services-is-still-running","title":"Validate Nginx services is still running","text":"<p>Execute the below commands to check the status of the service: <pre><code>sudo systemctl status nginx.service\n</code></pre></p>"},{"location":"deployment/reboot/#validate-temporarily-enabled-port-are-not-open","title":"Validate Temporarily enabled port are not open","text":"<p>Execute the below commands to check  for open ports and services. <pre><code>sudo firewall-cmd --zone=public --permanent --list-ports\n</code></pre></p> <p>Info</p> <p>Port <code>8080/tcp</code> and <code>54000/tcp</code> should not be present in this output. </p> <p>Or using the list-all command line option <pre><code>sudo firewall-cmd --list-all\n</code></pre></p> <p>Info</p> <p>Open ports are listed on line starting with ports: Port <code>8080/tcp</code> and <code>54000/tcp</code> should not be present in this output. </p> <p>Output: <pre><code>public (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: ens160\n  sources:\n  services: http https ssh\n  ports: \n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n</code></pre></p>"},{"location":"deployment/reboot/#validate-permanently-enabled-services-are-still-open","title":"Validate Permanently enabled Services are still open","text":"<p>Execute the below commands to check  for open ports and services. <pre><code>sudo firewall-cmd --zone=public --permanent --list-services\n</code></pre></p> <p>Info</p> <p><code>http</code> and <code>https</code> service should be present in this output. </p> <p>Output: <pre><code>http https ssh\n</code></pre></p> <p>Or using the list-all command line option <pre><code>sudo firewall-cmd --list-all\n</code></pre></p> <p>Info</p> <p>Open services are listed on line starting with services: <code>http</code> and <code>https</code> Service should be present in this output. </p> <p>Output: <pre><code>public (active)\n  target: default\n  icmp-block-inversion: no\n  interfaces: ens160\n  sources:\n  services: http https ssh\n  ports: \n  protocols:\n  forward: no\n  masquerade: no\n  forward-ports:\n  source-ports:\n  icmp-blocks:\n  rich rules:\n[root@localhost opt]#\n</code></pre></p>"},{"location":"deployment/stigman/","title":"Installing &amp; Configuring STIG Manager","text":"<p>Info</p> <p>STIG Manager binaries are made available with each release.</p>"},{"location":"deployment/stigman/#steps","title":"Steps","text":"<ol> <li>Extract STIG Manager Server</li> <li>Create a systemd Unit File for stigman</li> <li>Create a symbolic link (symlink) folder</li> <li>Enable SIG Manager service on system startup</li> <li>Configure STIG Manager</li> </ol>"},{"location":"deployment/stigman/#extract-stig-manager-application","title":"Extract STIG Manager Application","text":"<p>We are going to install STIG Manager to <code>/opt/</code> directory, so we will extract the  STIG Manager package to that location. </p> <p>Execute the below commands to move to the <code>/opt</code> directory: <pre><code>cd /opt/\n</code></pre></p> <p>Execute the below commands to unzip the STIG Manager: <pre><code>sudo tar -xf /opt/deployment/stigman/stig-manager-linux-1.4.11.tar.xz \\\n--one-top-level=\"stig-manager-1.4.11\" \\\n--strip-components=1\n</code></pre></p>"},{"location":"deployment/stigman/#creating-a-systemd-unit-file-for-stigman","title":"Creating a systemd Unit File for stigman","text":"<p>Copy systemd unit file (<code>stigman.service</code>) under <code>/opt/deployment/stigman/scripts/systemd/</code> to <code>/etc/systemd/system/</code> directory.</p> <p>Info</p> <p>More information bout system D files can be found here. systemd Unit Files</p> <p>Execute the below commands to move to <code>../systemd/</code> deployment directory: <pre><code>cd /opt/deployment/stigman/scripts/systemd/\n</code></pre></p> <p>Execute the below commands to copy the file: <pre><code>sudo cp ./stigman.service /etc/systemd/system/stigman.service\n</code></pre></p> <p>Execute the below commands to view contents of the file. Exit the editor when done. <pre><code>nano /etc/systemd/system/stigman.service\n</code></pre></p> <p>Below is the content of the <code>stigman.service</code> file <pre><code>[Unit]\nDescription=The STIG Manager Application Server\nAfter=syslog.target network.target\nBefore=httpd.service\n\n[Service]\nType=simple\nLimitNOFILE=102642\nAmbientCapabilities=CAP_SYS_ADMIN\nPIDFile=/var/run/stigman/stigman.pid\nWorkingDirectory=/opt/stig-manager\nExecStart=/bin/bash -c \"./stig-manager.sh\"\n\n# Logging\nStandardOutput=append:/var/log/stig-manager.log\nStandardError=append:/var/log/stig-manager.log\n\nSuccessExitStatus=0 143\nRestart=always\nRestartSec=60\nTimeoutStartSec=60\nTimeoutStopSec=60\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Execute the below commands to set the proper permissions over a unit file: <pre><code>chown root:root /etc/systemd/system/stigman.service\nchmod 0644 /etc/systemd/system/stigman.service\n</code></pre></p>"},{"location":"deployment/stigman/#create-a-symbolic-link-symlink-folder","title":"Create a symbolic link (symlink) folder.","text":"<p>A symlink is used hear to make the stig-manager-1.4.11  folder appear in the same directory on the  filesystem but with different names.</p> <p>Info</p> <p>This is used to simply version changes without changing the main configuration files. </p> <p>For example: the systemd file \"<code>stigman.service</code>\", will always point to stig-manager rather that a specific version.</p> <p>Execute the below commands to create the symlink for stig-manager:</p> <pre><code>sudo ln -s /opt/stig-manager-1.4.11 /opt/stig-manager\n</code></pre> <p>Note</p> <p>Below is an example of what this directory would look like for an upgrade. </p> <p>To remove the <code>sudo unlink /opt/stig-manager</code></p> <p>To link <code>stigman-1.4.12</code> run <code>sudo ln -s /opt/stigman-1.4.12 /opt/stig-manager</code></p> <pre><code>```sh\n...\nlrwxrwxrwx. 1 root     root       21 Jul  6 01:45 keycloak -&gt; /opt/keycloak-24.0.4/\ndrwxr-xr-x. 8 keycloak keycloak  138 Jul  6 11:00 keycloak-24.0.4\ndrwxr-xr-x. 8 root     root      163 Jul  6 02:12 keycloak-24.0.5\n...\nlrwxrwxrwx. 1 stigman  stigman    24 Jul  7 16:58 stig-manager -&gt; /opt/stig-manager-1.4.11\ndrwxr-xr-x. 2 root     root       61 Jul  7 16:55 stig-manager-1.4.11\n...\n</code></pre>"},{"location":"deployment/stigman/#enable-stigman-service-on-system-startup","title":"Enable stigman service on system startup","text":"<p>Reload systemd manager configuration  <pre><code>sudo systemctl daemon-reload\n</code></pre></p> <p>Execute the below commands to start the service: <pre><code>sudo systemctl start stigman\n</code></pre></p> <p>Execute the below commands to check the status of the service: <pre><code>sudo systemctl status stigman\n</code></pre></p> <p>Execute the below commands to enable the service on system startup: <pre><code>sudo systemctl enable stigman\n</code></pre></p> <p>Execute the below commands to look at the logs <pre><code>tail -f /var/log/stig-manager.log\n</code></pre></p> <p>Execute the below commands to stop the service: <pre><code>sudo systemctl stop stigman\n</code></pre></p>"},{"location":"deployment/stigman/#configure-stig-manager","title":"Configure STIG Manager","text":"<p>Reload systemd manager configuration </p> <p>Execute the below commands to edit stig-manager environment variables file. <pre><code>sudo nano /opt/stig-manager-1.4.11/stig-manager.sh\n</code></pre></p> stig-manager.sh Before<pre><code># export STIGMAN_CLASSIFICATION=\n...\n# export STIGMAN_DB_PASSWORD=\n...\n# export STIGMAN_CLIENT_OIDC_PROVIDER=\n...\n# export STIGMAN_OIDC_PROVIDER=\n</code></pre> <p>Un-comment the following variable and update their values: stig-manager.sh After<pre><code>export STIGMAN_CLASSIFICATION=C\n...\nexport STIGMAN_DB_PASSWORD=Password123!\n...\nexport STIGMAN_CLIENT_OIDC_PROVIDER=http://192.168.100.119:8080/realms/stigman\n...\nexport STIGMAN_OIDC_PROVIDER=http://localhost:8080/realms/stigman\n</code></pre></p> <p>Execute the below commands to restart service: <pre><code>sudo systemctl restart stigman.service\n</code></pre></p>"},{"location":"deployment/stigman/#summary","title":"Summary","text":"<p>Summary</p> <p>In these procedures, on a RHEL 7/8 distributions, you have:</p> <ul> <li>Extracted STIG Manager Server</li> <li>Created a systemd Unit File for stigman</li> <li>Created a symbolic link (symlink) folder.</li> <li>Enabled SIG Manager service on system startup</li> <li>Configured STIG Manager</li> </ul>"}]}